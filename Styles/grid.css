.grid-container {
    display: grid;
    grid-template-columns: 80px 2fr 90px 1fr; /*define the columns*/
    grid-template-rows: 80px 1fr 1fr; /*define the rows, can set various sizes*/

}

.grid-child {
    border: 2px solid rgb(23, 6, 155);
    padding: 20px;
    font-size: 15px;
    text-align: center;
    background-color: aquamarine; /*change the background color of the elements*/
}

.also-container { /*define the container for the elements - SIZE 4x3  even if there re jsut 4 elements written*/
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    grid-template-rows: 1fr 1fr 1fr;
    grid-gap: 10px;
    grid-template-areas: 
    "header header header header"
    "main main . sidebar"
    "footer footer footer footer";
    /* can name the areas anyway you like, so make them meaningful
    use . to indicate empty cells */
}

.also-child {
    border: 2px solid rgb(6, 157, 49);
    padding: 20px;
    font-size: 15px;
    text-align: center;
    background-color: rgb(163, 219, 239);
}

/* We can indicate where the element should be placed in the grid. We can rearrange the location of any defined element*/
/*define the position of the element - at which column it starts/ends, and at which row starts/ends*/

.top-nav {
    grid-area: header;
    display: flex;
    justify-content: center;
    align-items: center;
}

.main-article {
    grid-area: main;
    /*grid-column: 2 / 4; 
    grid-row: 2 / 4; */
}

.side-article {
    grid-area: sidebar;
    /*grid-column: 1 / 2;
    grid-row: 2 / 4; */
}

.end-content {
    grid-area: footer;
   /* grid-column: 2 / 4;
    grid-row: 1 / 2; */
} 
